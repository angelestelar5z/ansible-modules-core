#!/usr/bin/python -tt
# (c) 2012, Flowroute LLC
# Written by Matthew Williams <matthew@flowroute.com>
# Based on yum module written by Seth Vidal <skvidal at fedoraproject.org>
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.
#

try:
    import json
except ImportError:
    import simplejson as json
import os
import sys
import apt
import shlex
import subprocess
import traceback

APT_PATH = "/usr/bin/apt-get"
APT = "DEBIAN_PRIORITY=critical %s" % APT_PATH

def debug(msg):
    # ansible ignores stderr, so it's safe to use for debug
    print >>sys.stderr, msg
    #pass
    
def exit_json(rc=0, **kwargs):
    print json.dumps(kwargs)
    sys.exit(rc)

def fail_json(**kwargs):
    kwargs['failed'] = True
    exit_json(rc=1, **kwargs)

def run_apt(command):
    try:
        cmd = subprocess.Popen(command, shell=True, 
            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = cmd.communicate()
    except (OSError, IOError), e:
        rc = 1
        err = str(e)
        out = ''
    except:
        rc = 1
        err = traceback.format_exc()
        out = ''
    else:
        rc = cmd.returncode
        return rc, out, err

def package_status(pkgspec, cache):
    try:
       pkg = cache[pkgspec]
    except:
        fail_json(msg="No package matching '%s' is available" % pkgspec)
    return (pkg.is_installed, pkg.is_upgradable)

def install(pkgspec, cache, upgrade=False):
    (installed, upgradable) = package_status(pkgspec, cache)
    if installed or not upgrade or not upgradable:
        return False
    else:
        cmd = "%s -q -y install '%s'" % (APT, pkgspec)
        rc, out, err = run_apt(cmd)
        if rc:
            json_fail(msg="'apt-get install %s' failed: %s" % (pkgspec, err))
        return True

def remove(pkgspec, cache, purge=False):
    (installed, upgradable) = package_status(pkgspec, cache)
    if not installed:
        return False
    else:
        purge = '--purge' if purge else ''
        cmd = "%s -q -y %s remove '%s'" % (APT, purge, pkgspec)
        rc, out, err = run_apt(cmd)
        if rc:
            json_fail(msg="'apt-get remove %s' failed: %s" % (pkgspec, err))
        return True
    

# ===========================================

if not os.path.exists(APT_PATH):
   fail_json(msg="Cannot find apt-get")

argfile = sys.argv[1]
args    = open(argfile, 'r').read()
items   = shlex.split(args)

if not len(items):
    fail_json(msg='the module requires arguments -a')
    sys.exit(1)

params = {}
for x in items:
    (k, v) = x.split("=")
    params[k] = v

state        = params.get('state','installed')
package      = params.get('pkg', None)
update_cache = params.get('update-cache', 'no')
purge        = params.get('purge', 'no')

if state not in ['installed', 'latest', 'removed']:
    fail_json(msg='invalid state')
if update_cache not in ['yes', 'no']:
    fail_json(msg='invalid value for update_cache (requires yes or no -- default is no')
if purge not in ['yes', 'no']:
    fail_json(msg='invalid value for purge (requires yes or no -- default is no)')
if package is None and update-cache != 'yes':
    fail_json(msg='pkg=name and/or update-cache=yes is required')

cache = apt.Cache()
if update_cache == 'yes':
    cache.update()
    cache.open()

if state == 'latest':
    changed = install(package, cache, upgrade=True)
if state == 'installed':
    changed = install(package, cache)
elif state == 'removed':
    changed = remove(package, cache, purge == 'yes')
exit_json(changed=changed)


