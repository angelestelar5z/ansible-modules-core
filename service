#!/usr/bin/python

try:
    import json
except ImportError:
    import simplejson as json
import os
import sys
import shlex
import subprocess

# ===========================================
# convert arguments of form ensure=running name=foo
# to a dictionary
# FIXME: make more idiomatic

args = " ".join(sys.argv[1:])
items = shlex.split(args)
params = {}
for x in items:
    (k, v) = x.split("=")
    params[k] = v

name = params['name']
ensure = params.get('ensure','running')

# ===========================================
# get service status

status = os.popen("/sbin/service %s status" % name).read()

# ===========================================
# determine if we are going to change anything

running = False
if status.find("not running") != -1:
    running = False
elif status.find("running") != -1:
    running = True
elif name == 'iptables' and status.find("ACCEPT") != -1:
    # iptables status command output is lame
    # TODO: lookup if we can use a return code for this instead?
    running = True

changed = False
if not running and ensure == "started":
    changed = True
elif running and ensure == "stopped":
    changed = True
elif ensure == "restarted":
    changed = True

# ===========================================
# run change commands if we need to

def _run(cmd):
    return subprocess.call(cmd, 
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE, shell=True)


rc = 0
if changed:
    if ensure == 'started':
        rc = _run("/sbin/service %s start" %  name)
    elif ensure == 'stopped':
        rc = _run("/sbin/service %s stop" % name)
    elif ensure == 'restarted':
        rc1 = _run("/sbin/service %s stop" % name)
        rc2 = _run("/sbin/service %s start" % name)
        rc  = rc1 and rc2

if rc != 0:
    # yeah, should probably include output of failure...
    print json.dumps({
        "failed" : 1
    })
    sys.exit(1)

# ===============================================
# success

print json.dumps({
   "changed" : changed
})

